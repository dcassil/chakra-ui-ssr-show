{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;AAKA,MAAM,8BAAQ,OAAO,IAAI,CAAC,CAAA,GAAA,8CAAM,AAAD,GAAG,IAAI,CAAC;AAUvC,QAAQ,GAAG,CAAC;AAWL,MAAM,4CAAO,CAAC,QAAmB,CAAC,CAAC,GAAK;IAE7C,MAAM,UAAU,iDAA2B,MAAM,KAAK,EAAE,MAAM,KAAK;IACnE,MAAM,YAAY,MAAM,MAAM,GAAG,CAAA,GAAA,8CAAM,AAAD,CAAC,CAAC,MAAM,MAAM,CAAC,GAAmB,CAAA,GAAA,8CAAK,EAAE,GAAG;IAGlF,QAAQ,GAAG,CAAC,OAAO,WAAW,MAAM,WAAW,CAAA,GAAA,8CAAK,EAAE,IAAI;IAC1D,qBACE,gCAAC,CAAA,GAAA,8CAAK,EAAE,IAAI;QAAC,IAAG;QAAM,SAAS;kBAC5B,MAAM,QAAQ;OAD4B,MAAM,GAAG;AAI1D;AAEA,SAAS,iDAA2B,KAAsB,EAAE,KAAsB,EAAE;IAClF,MAAM,cAA2C,CAAC;IAElD,IAAI,OAAO;QACT,YAAY,IAAI,GAAG;QACnB,WAAW,CAAC,MAAM,GAAG;IACvB,CAAC;IACD,IAAI,OACF,WAAW,CAAC,MAAM,GAAG;IAGvB,OAAO,eAAe,CAAC;AACzB;;ADpDA","sources":["src/index.tsx","src/Show.ui.tsx"],"sourcesContent":["export * from \"./Show.ui\";\n","import React from 'react';\nimport  Chakra from '@chakra-ui/react';\nimport { ChakraComponent } from '@chakra-ui/react';\nimport {component} from './types';\n\nconst types = Object.keys(Chakra).join('\"|\"');\ntype breakpointTypes = 'xxs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\ntype propsType = {\n  above?: breakpointTypes;\n  below?: breakpointTypes;\n  showAs?: component;\n  children?: any;\n  key?: string;\n};\n\nconsole.log(types)\n\n/**\n *\n * @param props {above?: string, below?: string, key?: string, children: component [component] }\n * @returns Component\n * @description Conditionaly wraps children using css to show or hide ( supports SSR ).\n * @example <Show above=\"xs\">hello world</Show> will render when the screen size is greater than or equal to the xs breakpoint.\n * @example <Show below=\"sm\">hello world</Show> will redner when the screen size is equal to or below the sm breakpoint.\n * @example <Show above=\"xs\">hello world</Show> below=\"sm\" will render when the screen size is between xs and sm.\n */\nexport const Show = (props: propsType = {}) => {\n  type DivComponent = ChakraComponent<'div', {}>;\n  const display = getBreakpointDisplayValues(props.above, props.below);\n  const Component = props.showAs ? Chakra[props.showAs] as DivComponent : Chakra.Box;\n  \n\n  console.log(props, Component?.name, Component, Chakra.Flex)\n  return (\n    <Chakra.Flex id=\"poo\" display={display} key={props.key}>\n      {props.children}\n    </Chakra.Flex>\n  ) as DivComponent;\n}\n\nfunction getBreakpointDisplayValues(above: breakpointTypes, below: breakpointTypes) {\n  const breakpoints: Chakra.ResponsiveValue<any> = {};\n\n  if (above) {\n    breakpoints.base = 'none';\n    breakpoints[above] = 'initial';\n  }\n  if (below) {\n    breakpoints[below] = 'none';\n  }\n\n  return breakpoints || {};\n}\n"],"names":[],"version":3,"file":"main.js.map"}